# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ec2.html
# https://octopus.com/blog/aws-cloudformation-ec2-examples
# https://amolkokje.medium.com/aws-cloudformation-basics-and-tutorial-6a60d4de958c
# https://cloudonaut.io/6-unknown-cloudformation-features-you-should-know-about/
# https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/solutions/WordPress_Single_Instance.yaml
# https://stackoverflow.com/questions/28101267/installing-packages-using-apt-get-in-cloudformation-file
# https://stackoverflow.com/questions/63678459/aws-cloudformation-security-group-is-not-valid
# https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-template-validation/
# https://serverfault.com/questions/544439/aws-cloudformation-vpc-default-security-group
# https://start.jcolemorrison.com/the-complete-cloudformation-guide-outputs/
# https://www.derpturkey.com/ec2-cloudformation-example/
# https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-instance-tag-root-volume/
# https://aws.amazon.com/cloudformation/faqs/
# https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/VPC/VPC_EC2_Instance_With_Multiple_Static_IPAddresses.yaml
# https://www.infoq.com/articles/aws-vpc-cloudformation/
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
# https://stackoverflow.com/questions/42515321/subnet-parameter-doesnt-accept-list-as-an-input-in-cloud-formation-template-aws
# https://www.reddit.com/r/aws/comments/dvwj4a/issues_with_configuring_subnetid_in_ec2_cf/
# https://www.observian.com/blog/aws-cloudformation-101-introduction
# https://forums.aws.amazon.com/thread.jspa?threadID=93929
# https://jvzoggel.com/2018/08/15/aws-cloudformation-error-the-parameter-groupname-cannot-be-used-with-the-parameter-subnet/
# https://stackoverflow.com/questions/51611411/get-latest-ami-id-for-aws-instance
# https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-public-parameters.html
# https://discourse.ubuntu.com/t/finding-ubuntu-images-with-the-aws-ssm-parameter-store/15507
# https://docs.amazonaws.cn/en_us/AWSCloudFormation/latest/UserGuide/quickref-ec2.html
# https://stackoverflow.com/questions/63930017/cloudformation-create-ec2-specify-subnet
# https://stackoverflow.com/questions/63455876/aws-cloudformation-unable-to-attach-the-security-groups-to-the-instances-of-ela
# aws ssm get-parameters-by-path --path "/aws/service/ami-amazon-linux-latest" --region us-east-1
# aws ssm get-parameters --names /aws/service/canonical/ubuntu/server/18.04/stable/current/amd64/hvm/ebs-gp2/ami-id --query 'Parameters[0].[Value]' --output text

AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'Create two Amazon EC2 instances running the CIS Benchmarks Ubuntu AMI to host SonarQube and PostgresSQL containers in two AZs. 
One EBS volume will be created and mounted to the active EC2 instance with running containers.  The AMI is chosen based on the region in which the stack is run.'
Parameters:
  Env:
    Description: Application Envirnoment Type
    Type: String
    ConstraintDescription: must be one of the following.
    #Default: Dev
    AllowedValues: [POC, Test, Dev, QA, UAT, PreProd, Staging, Prod, DR]
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  Vpc:
    Type: "List<AWS::EC2::VPC::Id>"
    Default: vpc-07c9b85d62b6f4a7f
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  PrivateSubnet:
    # Type: AWS::EC2::Subnet::Id
    Type: "List<AWS::EC2::Subnet::Id>"
    Default: subnet-0d5faa025dde79b24
    Description: SubnetId of an existing subnet (for the primary network) in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be an existing subnet in the selected Virtual Private Cloud.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    # Default: 0.0.0.0/0
    Default: 67.82.52.94/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-efs.html
  VolumeName:
    Description: The name to be used for the EFS volume
    Type: String
    MinLength: '1'
    Default: EFSvolume
  MountPoint:
    Description: The Linux mount point for the EFS volume
    Type: String
    MinLength: '1'
    Default: EFSvolume

Resources:
  # https://computingforgeeks.com/configure-aws-application-load-balancer-with-cloudformation/
  # https://stackoverflow.com/questions/63118516/aws-cloudformation-target-group-for-application-load-balancer-is-not-working-fo

  SonarQubeLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Load Balancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      VpcId: vpc-07c9b85d62b6f4a7f

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: SonarQubeALB
      Subnets:
        # - !Ref PublicSubnet1
        # - !Ref PublicSubnet2
          - subnet-0d5faa025dde79b24
          - subnet-0c6790c3ecaffce32
      SecurityGroups:
        - !Ref SonarQubeLoadBalancerSG

  SonarQubeLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SonarQubeTargetGroup

  SonarQubeTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Name: SonarQubeTargetGroup
      VpcId: vpc-07c9b85d62b6f4a7f
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      Targets:
        - Id: !Ref EC2Instance1
          Port: 9000
        - Id: !Ref EC2Instance2
          Port: 9000

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SonarQube SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 5432
        #   ToPort: 5432
        #   CidrIp: 0.0.0.0/0
      VpcId: vpc-07c9b85d62b6f4a7f

  EC2Instance1:
    Type: AWS::EC2::Instance
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT10M
    Properties:
      # ImageId: !Ref 'LatestAmiId' # https://octopus.com/blog/aws-cloudformation-ec2-examples
      # CIS Ubuntu Linux 20.04 LTS Benchmark - Level 1
      # https://aws.amazon.com/marketplace/server/configuration?productId=96863db2-ecac-4ad4-8d50-e63c424d6245&ref_=psb_cfg_continue

      # DisableApiTermination: true
      ImageId: ami-0de8ae0e6d86b93c8
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: EC2SSM
      # Monitoring: true
      # Monitoring: false
      SubnetId: subnet-0d5faa025dde79b24
      SecurityGroupIds:
        - !Ref EC2SecurityGroup

      # To list volume, lsblk
      # attached volume, https://docs.aws.amazon.com/cli/latest/reference/ec2/attach-volume.html
      # aws ec2 attach-volume --volume-id vol-1234567890abcdef0 --instance-id i-01474ef662b89480 --device /dev/sdf
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            Encrypted: true
        - DeviceName: "/dev/sdf"
          Ebs:
            VolumeSize: 8
            VolumeType: gp3
            Encrypted: true
            DeleteOnTermination: true
            # DeleteOnTermination: false
            # AutoEnableIO: true
            # MultiAttachEnabled: false
      Tags:
        - Key: Name
          Value: !Join ['-', [ !Ref 'AWS::StackName', !Ref 'Env' ] ] 
        - Key: Env
          Value: !Ref 'Env'
        - Key: OwnerContact
          Value: "nydevops@smbc-cm.com"

  EC2Instance2:
    Type: AWS::EC2::Instance
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT10M
    Properties:
      # ImageId: !Ref 'LatestAmiId' # https://octopus.com/blog/aws-cloudformation-ec2-examples
      # CIS Ubuntu Linux 20.04 LTS Benchmark - Level 1
      # https://aws.amazon.com/marketplace/server/configuration?productId=96863db2-ecac-4ad4-8d50-e63c424d6245&ref_=psb_cfg_continue

      # DisableApiTermination: true
      ImageId: ami-0de8ae0e6d86b93c8
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: EC2SSM
      # Monitoring: true
      # Monitoring: false
      SubnetId: subnet-0c6790c3ecaffce32
      SecurityGroupIds:
        - !Ref EC2SecurityGroup

      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            Encrypted: true
      Tags:
        - Key: Name
          Value: !Join ['-', [ !Ref 'AWS::StackName', !Ref 'Env', 'Standby' ] ] 
        - Key: Env
          Value: !Ref 'Env'
        - Key: OwnerContact
          Value: "nydevops@smbc-cm.com"

Outputs:
  Env:
    Description: EC2 instance Environment
    Value: !Ref 'Env'
  InstanceId1:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance1'
  SecurityGroupId:
    Description: Group ID of the newly created EC2 security group
    Value: EC2SecurityGroup
  AZ1:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance1, AvailabilityZone]
  PrivateDnsName1:
    Description: Private DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance1, PrivateDnsName]
  PrivateIp1:
    Description: Private IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance1, PrivateIp]
  # PublicDNS:
  #   Description: Public DNSName of the newly created EC2 instance
  #   Value: !GetAtt [EC2Instance1, PublicDnsName]
  # PublicIP:
  #   Description: Public IP address of the newly created EC2 instance
  #   Value: !GetAtt [EC2Instance1, PublicIp]

  InstanceId2:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance2'
  AZ2:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance2, AvailabilityZone]
  PrivateDnsName2:
    Description: Private DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance2, PrivateDnsName]
  PrivateIp2:
    Description: Private IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance2, PrivateIp]
