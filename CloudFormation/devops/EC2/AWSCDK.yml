AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create an Amazon EC2 instances running the CIS Benchmarks Ubuntu AMI to host AWX ontainers. 
The AMI is chosen based on the region in which the stack is run.'
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Network Configuration"
        Parameters: 
          - Vpc
          - PrivateSubnet
          - SecurityGroupID
          - SSHLocation
      - Label: 
          default: "Amazon EC2 Configuration"
        Parameters:
          - Env
          - KeyName
          - InstanceType
          - LatestAmiId
    ParameterLabels: 
      Vpc: 
        default: "Which VPC should this be deployed to?"

Parameters:
  Env:
    Description: Application Envirnoment Type
    Type: String
    ConstraintDescription: must be one of the following.
    #Default: Dev
    AllowedValues: [POC, Test, Dev, QA, UAT, PreProd, Staging, Prod, DR]
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium]
    ConstraintDescription: must be a valid EC2 instance type.
  Vpc:
    Type: "List<AWS::EC2::VPC::Id>"
    Default: vpc-07c9b85d62b6f4a7f
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  PrivateSubnet:
    # Type: AWS::EC2::Subnet::Id
    Type: "List<AWS::EC2::Subnet::Id>"
    Default: subnet-0d5faa025dde79b24
    Description: SubnetId of an existing subnet (for the primary network) in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be an existing subnet in the selected Virtual Private Cloud.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    # Default: 0.0.0.0/0
    Default: 67.82.52.94/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  # https://computingforgeeks.com/configure-aws-application-load-balancer-with-cloudformation/
  # https://stackoverflow.com/questions/63118516/aws-cloudformation-target-group-for-application-load-balancer-is-not-working-fo

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SonarQube SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: vpc-07c9b85d62b6f4a7f

  EC2Instance1:
    Type: AWS::EC2::Instance
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT10M
    # Metadata: 
    #   AWS::CloudFormation::Init:
    #     config: 
    #       packages: 
    #         yum:
    #           httpd: []
    #           php: []
    Properties:
      # ImageId: !Ref 'LatestAmiId' # https://octopus.com/blog/aws-cloudformation-ec2-examples
      # CIS Ubuntu Linux 20.04 LTS Benchmark - Level 1 - ami-0de8ae0e6d86b93c8
      # https://aws.amazon.com/marketplace/server/configuration?productId=96863db2-ecac-4ad4-8d50-e63c424d6245&ref_=psb_cfg_continue
      #
      # Ubuntu Pro 20.04 LTS - ami-0ed28656d62ce20d6
      # https://aws.amazon.com/marketplace/server/configuration?productId=ae7ed378-8838-4fcf-842d-d1d09b34f116&ref_=psb_cfg_continue
      # DisableApiTermination: true

      # ImageId: ami-0de8ae0e6d86b93c8  # CIS Ubuntu Linux 20.04 LTS Benchmark
      ImageId: ami-0ed28656d62ce20d6  # Ubuntu Pro 20.04 LTS
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: EC2SSM
      # Monitoring: true
      # Monitoring: false
      SubnetId: subnet-0d5faa025dde79b24
      SecurityGroupIds:
        - !Ref EC2SecurityGroup

      # To list volume, lsblk
      # attached volume, https://docs.aws.amazon.com/cli/latest/reference/ec2/attach-volume.html
      # aws ec2 attach-volume --volume-id vol-1234567890abcdef0 --instance-id i-01474ef662b89480 --device /dev/sdf
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            Encrypted: true
        # - DeviceName: "/dev/sdf"
        #   Ebs:
        #     VolumeSize: 8
        #     VolumeType: gp3
        #     Encrypted: true
        #     DeleteOnTermination: true
        #     # DeleteOnTermination: false
        #     # AutoEnableIO: true
        #     # MultiAttachEnabled: false
      Tags:
        - Key: Name
          Value: !Join ['-', [ !Ref 'AWS::StackName', !Ref 'Env' ] ] 
        - Key: Env
          Value: !Ref 'Env'
        - Key: OwnerContact
          Value: "nydevops@smbc-cm.com"

      UserData: !Base64 
        'Fn::Join':
          - |+
            - - '#!/bin/bash'
            - apt-get update
            - apt-get upgrade -y
          # - - '#!/bin/bash'
          #   - apt update
          #   - apt upgrade -y
          #   - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          #   - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          #   - cd /home/ubuntu && curl -s https://api.github.com/repos/docker/compose/releases/latest | grep browser_download_url | grep docker-compose-Linux-x86_64 | cut -d '"' -f 4 | wget -i -
          #   # - curl -L https://github.com/docker/compose/releases/download/1.28.5/docker-compose-Linux-x86_64 -o docker-compose-Linux-x86_64
          #   - mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose
          #   - chmod +x /usr/local/bin/docker-compose
          #   - mount /tmp -o remount,exec
          #   - echo Installing Ansible prereq on Ubuntu 20.04 ---
          #   - apt install ansible -y
          #   - apt install python3-pip -y 
          #   - apt install git -y 
          #   - apt install vim -y
          #   - pip3 install requests==2.14.2
            # - apt install apache2 -y
            # - echo "<html><body><h1>Welcome</h1>" > /var/www/index.html
            # - !Join 
            #   - ''
            #   - - 'echo "<h2>Environment: '
            #     - !Ref Env
            #     - </h2>" >> /var/www/index.html
            # - !Join 
            #   - ''
            #   - - 'echo "<h2>Role: '
            #     - !Join ['-', [ !Ref 'AWS::StackName', !Ref 'Env' ] ] 
            #     - </h2>" >> /var/www/index.html
            # - echo "</body></html>" >> /var/www/index.html
Outputs:
  Env:
    Description: EC2 instance Environment
    Value: !Ref 'Env'
  InstanceId1:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance1'
  SecurityGroupId:
    Description: Group ID of the newly created EC2 security group
    Value: EC2SecurityGroup
  AZ1:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance1, AvailabilityZone]
  PrivateDnsName1:
    Description: Private DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance1, PrivateDnsName]
  PrivateIp1:
    Description: Private IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance1, PrivateIp]
  # PublicDNS:
  #   Description: Public DNSName of the newly created EC2 instance
  #   Value: !GetAtt [EC2Instance1, PublicDnsName]
  # PublicIP:
  #   Description: Public IP address of the newly created EC2 instance
  #   Value: !GetAtt [EC2Instance1, PublicIp]
