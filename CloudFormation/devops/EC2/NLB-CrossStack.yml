# https://jvzoggel.com/2018/08/29/example-aws-cloudformation-template-for-network-load-balancer/
# https://github.com/aws-samples/ecs-refarch-cloudformation/blob/master/infrastructure/load-balancers.yaml
# https://stackoverflow.com/questions/63583272/aws-how-do-i-create-a-network-load-balancer-target-group-using-cloudformation
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
# https://grapeup.com/blog/automating-your-enterprise-infrastructure-part-2-cloud-infrastructure-as-code/

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Template creates a Network Load Balancer in 2 AZs with listening on TCP
  port 9000. There are no registered targets these would either be EC2 instance
  IDs added to the targets property of the target group  or defined under the
  autoscaling group resources  
Parameters:
  Env:
    Description: Application Envirnoment Type
    Type: String
    ConstraintDescription: must specify Dev, UAT, Prod.
    Default: Prod
  AppsName:
    Description: Application Stack Name
    Type: String
    Default: SonarQube
  EC2Stack1a:
    Description: EC2 instance Source Stack Name in AZ1 Subnet1a
    Type: String
    Default: CM-SonarQube-Apps-Prod1a
  EC2Stack1b:
    Description: EC2 instance Source Stack Name in AZ2 Subnet1b
    Type: String
    Default: CM-SonarQube-Apps-Prod1b
  LBPort:
    Description: LB instance TCP Port Number
    Type: String
    Default: 80
  TargetAppsPort:
    Description: Target Apps instance TCP Port Number
    Type: String
    Default: 9000
Resources:
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub SonarQubeLB-${Env}-cfn
      Scheme: internal
      Type: network
      Subnets: 
        - Fn::ImportValue:
              Fn::Sub: "${EC2Stack1a}-PrivateSubnet1a"   #us-east-1a
        - Fn::ImportValue:
              Fn::Sub: "${EC2Stack1b}-PrivateSubnet1b"   #us-east-1b
      Tags:
        - Key: Name
          Value: !Sub ${AppsName}-NLB-cfn
        - Key: Env
          Value: !Ref Env

  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref LBPort
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  DefaultTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name:  !Sub ${AppsName}Targets-${Env}-cfn
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EC2Stack1a}-Vpc"
      Port: !Ref TargetAppsPort
      Protocol: TCP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Targets:
        #- Id: !Ref ECInstanceID
        - Id: 
            Fn::ImportValue:
              Fn::Sub: "${EC2Stack1a}-InstanceId1"
          Port: !Ref TargetAppsPort
        - Id:
            Fn::ImportValue:
              Fn::Sub: "${EC2Stack1b}-InstanceId1" 
          Port: !Ref TargetAppsPort
      Tags:
        - Key: Name
          Value: !Sub ${AppsName}-NLB-Target-cfn
        - Key: Env
          Value: !Ref 'Env'

Outputs:
  LoadBalancer:
    Description: A reference to the Network Load Balancer
    Value: !Ref LoadBalancer
  LoadBalancerUrl:
    Description: The URL of the NLB
    Value: !GetAtt LoadBalancer.DNSName
  Listener:
    Description: A reference to a port listener
    Value: !Ref LoadBalancerListener