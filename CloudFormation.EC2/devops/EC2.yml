AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample:
  Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run. This example creates an EC2 security group
  for the instance to give you SSH access. **WARNING** This template creates an Amazon
  EC2 instance. You will be billed for the AWS resources used if you create a stack
  from this template.'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  # https://stackoverflow.com/questions/51611411/get-latest-ami-id-for-aws-instance
  # https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-public-parameters.html
  # https://discourse.ubuntu.com/t/finding-ubuntu-images-with-the-aws-ssm-parameter-store/15507
  # aws ssm get-parameters-by-path --path "/aws/service/ami-amazon-linux-latest" --region us-east-1
  # aws ssm get-parameters --names /aws/service/canonical/ubuntu/server/18.04/stable/current/amd64/hvm/ebs-gp2/ami-id --query 'Parameters[0].[Value]' --output text
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
  # https://octopus.com/blog/aws-cloudformation-ec2-examples
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install packages
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      # AWS::CloudFormation::Init:
      #   config:
      #     packages:
      #       yum:
      #         httpd: []
      UserData:
        # To check UserData, http://169.254.169.254/
        !Base64 |
        #!/bin/bash
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt -y update
        sudo apt -y install docker-ce docker-ce-cli containerd.io
        sudo docker version
        sudo apt -y install bash-completion
        sudo sysctl -w vm.max_map_count=262144
        # sysctl -w fs.file-max=655356
        sudo sysctl -p
        # 
        sudo cd /home/ubuntu
        sudo curl -s https://api.github.com/repos/docker/compose/releases/latest | grep browser_download_url | grep docker-compose-Linux-x86_64 | cut -d '"' -f 4 | wget -i -
        sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose
        ls -lart /usr/local/bin/docker-compose
        #
        # docker-compose: error while loading shared libraries: libz.so.1: failed to map segment from shared object
        sudo mount /tmp -o remount,exec
        #
        sudo chmod +x /usr/local/bin/docker-compose
        sudo /usr/local/bin/docker-compose --version
        #
        sudo curl -L https://raw.githubusercontent.com/docker/compose/master/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose
        ls -lart /etc/bash_completion.d/docker-compose
        sudo reboot now
      Tags:
        -
          Key: Appplication
          Value:  SonarQube
        -
          Key: Environment
          Value: Test
        -
          Key: OwnerContact
          Value: "nydevops@smbc-cm.com"
    Properties:
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: EC2SSM
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      KeyName: !Ref 'KeyName'
      # ImageId: !Ref 'LatestAmiId' # https://octopus.com/blog/aws-cloudformation-ec2-examples
      # CIS Ubuntu Linux 20.04 LTS Benchmark - Level 1
      # https://aws.amazon.com/marketplace/server/configuration?productId=96863db2-ecac-4ad4-8d50-e63c424d6245&ref_=psb_cfg_continue
      ImageId: ami-0de8ae0e6d86b93c8
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
